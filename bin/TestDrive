#!/usr/bin/ruby

# Take those review requests for a test drive!
# Written by Mike Conley in Feb 2010 for the MarkUs Team.
# Thanks to Severin for the code review!
# http://www.markusproject.org
# http://www.mikeconley.ca

# Thanks to Benjamin and Evan, too.

begin
  require 'fileutils'
  require 'yaml'
  # in case json is a gem
  require 'rubygems'
  require 'json'
  require 'net/http'
  require 'getoptlong'
  require 'sqlite3'
rescue LoadError => e
  $stderr.puts("Required library not found: '#{e.message}'.  See README for requirements list.")
  exit(1)
end

CONFIG_FILE = 'TestDrive.conf.yml'
VERBOSE = true
NOISY = true
LATEST = 'latest'
RR_DIR_PREFIX = 'rev_req_'
RR_DIFF_PREFIX = 'diff_for_rr_'
SVN_CO_DIR_NAME = 'test_drive'
MARKUS_REPO_DIR = 'repos'
MARKUS_PDF_STORAGE_DIR = 'pdf_storage'
MARKUS_TEST_FRAMEWORK_REPO_DIR = 'test_framework_repos'
MARKUS_REPO_DIR_TEST = 'repos-test'
MARKUS_TEST_FRAMEWORK_REPO_DIR_TEST = 'test_framework_repos-test'
DEFAULT_TARGET_BRANCH = 'master'
OPTS = GetoptLong.new(
      [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
      [ '--review-request-num', '-r', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--diff', '-d', GetoptLong::OPTIONAL_ARGUMENT ],
      [ '--autotest', '-a', GetoptLong::OPTIONAL_ARGUMENT ],
      [ '--autostart', '-s', GetoptLong::OPTIONAL_ARGUMENT ],
      [ '--pvalue', '-p', GetoptLong::OPTIONAL_ARGUMENT ]
    )

# In case people don't know what they're doing...
def usage
  $stderr.puts "Usage:  TestDrive -r[review request num] -d[diff version (defaults latest)] -a [to run rake test automatically] -s [to run script/server automatically] -p [p-value for patch (TestDrive attempts to guess)]"
  exit(1)
end

# This is what we'll use to connect to ReviewBoard...
class ReviewBoardClient
  attr_accessor :url, :http

  def initialize(url)
    self.url = url
    self.http = Net::HTTP.new(self.url)
  end

  def get_review_request_for(review_request_num)
    path = '/api/review-requests/' + review_request_num.to_s + '/'
    r = self.http.get(path)
    if !r.is_a?(Net::HTTPSuccess)
      raise "There was a problem communicating with the Review Board server!  :("
    end
    result = JSON.parse(r.body)

    if result['stat'] == "fail":
      msg = "There was a problem getting review request ##{review_request_num}: "
      msg += "#{result['err']['msg']} (Error Code: #{result['err']['code']})"
      raise msg
    end

    return JSON.parse(r.body)
  end
  # Currently, there's no way to get the diffs through the API.
  # (See:  http://www.mail-archive.com/reviewboard@googlegroups.com/msg00860.html)
  # Luckily, we can just go in through the front door instead...
  def get_diff_for(review_num, diff_num)
    path = '/r/' + review_num.to_s + '/diff/'
    if diff_num != LATEST
      path += diff_num.to_s
    end
    path += 'raw/'
    r = http.get(path)
    return r.body
  end

  # It boggles my mind that I had to implement this myself
  # (or rather, steal it from:
  # http://justanothercoder.wordpress.com/2009/04/24/converting-a-hash-to-a-query-string-in-ruby/)
  def hash_to_querystring(hash)
    hash.keys.inject('') do |query_string, key|
      query_string << '&' unless key == hash.keys.first
      query_string << "#{URI.encode(key.to_s)}=#{URI.encode(hash[key])}"
    end
  end
end


def load_config(config_file)
  conf = YAML.load_file(config_file)  
  # This is where I might configuration checks someday...
  return conf
end

def load_params()
  result = Hash.new
  result['diff_num'] = LATEST
  OPTS.each do |opt, arg|
    case opt
      when '--help'
        usage()
      when '--review-request-num'
        result['review_request_num'] = arg
      when '--diff'
        result['diff_num'] = arg
      when '--autotest'
        result['autotest'] = true
      when '--autostart'
        result['autostart'] = true
      when '--pvalue'
        result['pvalue'] = arg
    end
  end
  # We need at least this
  if result['review_request_num'].nil?
    usage()
  end
  return result
end

# So I can turn the noise off
def msg(text)
  print text if VERBOSE
  STDOUT.flush
end

def msgln(text)
  puts text if VERBOSE
  STDOUT.flush
end

def beep()
  print "\a" if NOISY
end

#by Juan Pablo at http://jptarqu.blogspot.com/
def call_rake(arguments)
  if RUBY_PLATFORM =~ /mswin/
    rake_cmd = "rake.bat" #very important because windows will break with just "rake"
  else
    rake_cmd = "rake"
  end
  puts "calling #{rake_cmd} " + arguments
  puts system("#{rake_cmd} " + arguments)
  puts $?
end


def use_diff(target_branch, params, conf, rb, review_request)

  msg("Trying to get diff #{params['diff_num']}...")
  diff = rb.get_diff_for(params['review_request_num'], params['diff_num'])
  msgln("got it!")

  # Change to the branch that this patch applies to
  if target_branch != DEFAULT_TARGET_BRANCH
    `git checkout -b #{target_branch}`
  end

  # Create the branch for this review_request patch
  branch_name = "rev-req-#{review_request['review_request']['id']}"
  `git checkout -b #{branch_name}`

   # Apply diff
  msg("Applying diff...")
  diff_file = RR_DIFF_PREFIX + params['review_request_num']
  File.open(diff_file, 'w') do |f|
    f.write(diff)
  end
  msgln("ok!")

  msg("Applying diff...")

  if not system "git apply --reject --whitespace=fix #{diff_file}"
    raise "**PATCHING FAILED**  Aborting TestDrive..."
  end
  msgln("ok!")

  return branch_name
end

def use_branch(gh_branch, target_branch, conf, review_request)
  `git checkout #{target_branch}`
  # Attempt to find the GitHub account for the submitter
  submitter = review_request['review_request']['links']['submitter']['title']

  if not conf['github']['accounts'].has_key?(submitter)
    raise "I couldn't find a GitHub link for #{submitter} in your TestDrive.yml.conf.  :("
  end

  submitter_github = conf['github']['accounts'][submitter]
  branch_name = "#{submitter}-rev-req-#{review_request['review_request']['id']}"
  `git checkout -b #{branch_name}`
  `git pull #{submitter_github} #{gh_branch}`

  return branch_name
end

def extract_branch(review_request)
  branch_scan = review_request['review_request']['description'].scan(/@branch\s+(\w+)/)
  if branch_scan.empty?
    return nil
  else
    return branch_scan[0][0]
  end
end

begin
  params = load_params()
  conf = load_config(CONFIG_FILE)
  rb = ReviewBoardClient.new(conf['review_board']['url'])

  msg("Trying to get Review Request ##{params['review_request_num']}...")
  # Get the review request
  review_request = rb.get_review_request_for(params['review_request_num'])
  msgln("got it!")

  # If there wasn't a branch specified, we need to ask...
  if review_request['review_request']['branch'] == ""
    beep()
    puts "\nLooks like a branch wasn't specified.  Which branch is this review for? [#{DEFAULT_TARGET_BRANCH}]:"
    target_branch = gets
    if target_branch.strip == ""
      target_branch = DEFAULT_TARGET_BRANCH
    end
  else
    target_branch = review_request['review_request']['branch']
  end

  FileUtils.cd(conf['git']['td_clone'])

  # Make sure we've got the most recent updates
  `git fetch origin`

  # Ok, and now we check to see if the review request has a @branch
  # in the description.  If so, we're going to try to pull from Github
  # instead of applying the raw diff from Review Board.

  if (gh_branch = extract_branch(review_request))
    # Ok, we found a @branch
    result_branch_name = use_branch(gh_branch, target_branch, conf, review_request)
  else
    result_branch_name = use_diff(target_branch, params, conf, rb, review_request)
  end

  # Assumes we're in the working directory for the test drive...

  msgln("Running bundler...")
  `bundle install`

  msgln("Creating / migrating databases...")

  call_rake('db:reset')
  call_rake('db:migrate')
  call_rake('db:schema:dump')
  call_rake('db:test:prepare')

  msgln("Populating databases...")
  call_rake('db:populate')

  if params['autotest']
    msg("Running tests (dumping to test_report)...give this a few minutes...")
    call_rake('test 2>&1 | tee test_report')
  end

  msgln("All done setting up!")
  beep()
  if params['autostart']
    msgln("Firing it up! - should be good to go on localhost:3000 momentarily...")
    exec 'script/server'
  end
  msgln("All done!  Created branch #{result_branch_name}.  Coolbeans!")

rescue GetoptLong::MissingArgument, GetoptLong::NeedlessArgument, GetoptLong::InvalidOption => e
  puts e.message
  usage()
rescue Exception => e
  if e.class != SystemExit
    puts "\n\n---------------------------------"
    puts e.message
    puts e.inspect
    puts 'BACKTRACE:'
    puts e.backtrace
    exit(1)  
  end
end


